{"version":3,"sources":["questionsData.js","components/FinishCard.js","components/Questions.js","components/QuizApp.js","App.js","serviceWorker.js","index.js"],"names":["quizData","id","question","options","answer","FinishCard","props","className","counter","map","item","index","key","Questions","questions","handleCheckAnswer","myAnswer","currentQuestion","handleChangeQuestion","handleFinish","isFinished","length","option","onClick","QuizApp","state","loadQuizData","setState","this","prevProps","prevState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f45aaed.chunk.js","sourcesContent":["export const quizData = [\r\n    {\r\n      id: 1,\r\n      question: ` What animal Rowan turns into?`,\r\n      options: [`panther`, `hawk`, `wolf`, `dragonfly`],\r\n      answer: `hawk`\r\n    },\r\n    {\r\n      id: 2,\r\n      question: `What’s the real name of Celaena Sardothien?`,\r\n      options: [`Aelin Ashryver Whitethorn Galathynius`, `Aelin Ashriver Whitethorn Galathynius`, `Lysandra Ashryver née Ennar`, `Aelin Ashryver Ennar Galathynius`],\r\n      answer: `Aelin Ashryver Whitethorn Galathynius`\r\n    },\r\n    {\r\n      id: 3,\r\n      question: `Where Aelin was born?`,\r\n      options: [`Orynth`, `Rifthold`, `Eyllwe`, `Varese`],\r\n      answer: `Orynth`\r\n    },\r\n    {\r\n      id: 4,\r\n      question: `How old is Dorian in the first volume of Throne of Glass series?`,\r\n      options: [`20`, `27`, `17`, `19`],\r\n      answer: `19`\r\n    },\r\n      {\r\n      id: 5,\r\n      question: `What’s the name of Aelin’s dog?`,\r\n      options: [`Fire`, `Fleetfoot`, `Arrowhead`, `Tulip`],\r\n      answer: `Fleetfoot`\r\n    },\r\n      {\r\n      id: 6,\r\n      question: `What is Lysandra's occupation?`,\r\n      options: [`assassin`, `carter`, `courtesan`, `baker`],\r\n      answer: `courtesan`\r\n    },\r\n      {\r\n      id: 7,\r\n      question: `Who is the first character mentioned by name in Heir of Fire?`,\r\n      options: [`Chaol Westfall`, `Dorian Havilliard`, `Celaena Sardothien`, `Aelin Galathynius`],\r\n      answer: `Celaena Sardothien`\r\n    },\r\n      {\r\n      id: 8,\r\n      question: `What is the capital of Adarlan?`,\r\n      options: [`Rifthold`, `Orynth`, `Varese`, `Meah`],\r\n      answer: `Rifthold`\r\n    },\r\n      {\r\n      id: 9,\r\n      question: `What clan does Asterin belong to?`,\r\n      options: [`Yellowlegs`, `Fleetfoot`, `Purebloods`, `Blackbeaks`],\r\n      answer: `Blackbeaks`\r\n    },\r\n      {\r\n      id: 10,\r\n      question: `Where do the Thirteen stay and work in Queen of Shadows?`,\r\n      options: [`Meah`, `Rifthold`, `Morath`, `Varese`],\r\n      answer: `Morath`\r\n    },\r\n      {\r\n      id: 11,\r\n      question: `What was the name of Rowan's wife?`,\r\n      options: [`Lyria`, `Mab`, `Lysandra`, `Lyvia`],\r\n      answer: `Lyria`\r\n    },\r\n      {\r\n      id: 12,\r\n      question: `How many members does Cadre have in Heir of Fire?`,\r\n      options: [`8`, `4`, `6`, `12`],\r\n      answer: `6`\r\n    },\r\n      {\r\n      id: 13,\r\n      question: `What eye color does Elide have?`,\r\n      options: [`onyx`, `emerald`, `grey`, `amber`],\r\n      answer: `onyx`\r\n    },\r\n      {\r\n      id: 14,\r\n      question: `What is the name of Aedion's sword?`,\r\n      options: [`Sword of Orynth`, `Morath`, `Goldryn`, `Damaris`],\r\n      answer: `Sword of Orynth`\r\n    },\r\n    {\r\n      id: 15,\r\n      question: `What is Dorian's fathers name?`,\r\n      options: [`Hollin`, `Brannon`, `Dorian`, `Chaol`],\r\n      answer: `Dorian`\r\n    }\r\n  ];\r\n  ","import React from 'react';\r\nimport { quizData } from '../questionsData';\r\n\r\nfunction FinishCard(props) {\r\n  return (\r\n    <>\r\n    <h3 className=\"result_count\">Game Over! Your final score is {props.counter} {props.counter===1? 'point': 'points'} </h3>\r\n    <div className=\"result_container-for-right-answers\">\r\n            The correct answers:\r\n            <ul className=\"result_list-right-answers\">\r\n              {quizData.map((item, index) => (\r\n                <li className=\"result_right-answers\" key={index}>\r\n                  {item.answer}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default FinishCard;","import React from 'react';\r\nimport { quizData } from '../questionsData';\r\nimport FinishCard from './FinishCard';\r\n\r\nfunction Questions(props) {\r\n    let { questions, options, handleCheckAnswer, myAnswer, currentQuestion, handleChangeQuestion, handleFinish, isFinished, counter } = props\r\n\r\n    return (\r\n        (isFinished)? \r\n            <FinishCard counter={counter}/>\r\n         :<>        \r\n            <h2 className=\"quiz-content_question-counter\">{currentQuestion===0? `Question`: `Questions`}  {currentQuestion +1}  out of {quizData.length} remaining </h2>\r\n        <h1 className=\"quiz-content_question\">{questions} </h1>\r\n            {options.map(option => (\r\n            <div onClick={()=>handleCheckAnswer(option)} className={myAnswer === option ? \"quiz-content_options selected\" : \"quiz-content_options\"} >{option}</div>\r\n            ))}\r\n            {currentQuestion<quizData.length-1 ?\r\n            <button className=\"quiz-content_btn\"\r\n                onClick={handleChangeQuestion}\r\n              >\r\n                Next\r\n              </button> :\r\n              <button className=\"quiz-content_btn\" onClick={handleFinish}>Finish</button>}\r\n            </>\r\n    )\r\n}\r\n\r\nexport default Questions;","import React, { Component } from 'react';\r\nimport {quizData} from '../questionsData';\r\nimport Questions from './Questions';\r\n\r\nclass QuizApp extends Component {\r\n  state = {\r\n    currentQuestion: 0,\r\n    options: [],\r\n    questions: '',\r\n    answer: '',\r\n    myAnswer:'',\r\n    counter: 0,\r\n    isFinished: false\r\n  }\r\n loadQuizData = () => {\r\n        this.setState({\r\n            questions: quizData[this.state.currentQuestion].question,\r\n            answer: quizData[this.state.currentQuestion].answer,\r\n            options: quizData[this.state.currentQuestion].options,\r\n          });\r\n      };\r\n\r\n  handleChangeQuestion = () => {\r\n    if(this.state.myAnswer===this.state.answer){\r\n      this.setState({\r\n        counter: this.state.counter+1\r\n      })\r\n    }\r\n    this.setState({\r\n      currentQuestion: this.state.currentQuestion+1\r\n    })\r\n  }\r\n  componentDidMount(){\r\n        this.loadQuizData();\r\n      }\r\n\r\n      componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.currentQuestion !== prevState.currentQuestion) {\r\n          this.setState(() => {\r\n            return {\r\n              questions: quizData[this.state.currentQuestion].question,\r\n              options: quizData[this.state.currentQuestion].options,\r\n              answer: quizData[this.state.currentQuestion].answer\r\n            };\r\n          });\r\n        }\r\n      }\r\n\r\n    handleCheckAnswer=(myAnswer)=>{\r\n      this.setState({\r\n        myAnswer: myAnswer\r\n      })\r\n    }\r\n\r\n    handleFinish = ()=>{\r\n      this.setState({\r\n        isFinished: true\r\n      })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n          <div className=\"quiz-content\">\r\n            <Questions \r\n            questions={this.state.questions} \r\n            options={this.state.options}\r\n            handleCheckAnswer={this.handleCheckAnswer}\r\n            myAnswer={this.state.myAnswer}\r\n            currentQuestion={this.state.currentQuestion}\r\n            handleChangeQuestion={this.handleChangeQuestion}\r\n            handleFinish={this.handleFinish}\r\n            isFinished={this.state.isFinished}\r\n            counter={this.state.counter}/>\r\n          </div>\r\n        );\r\n      }\r\n    \r\n}        \r\n\r\n\r\nexport default QuizApp;","import React from 'react';\nimport QuizApp from './components/QuizApp';\nimport './css/main.min.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1 className=\"app_header\">How well do you know Throne of glass series?</h1>\n      <QuizApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}